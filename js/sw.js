var CACHE = 'pwabuilder-precache';var precacheFiles = [    '/',    '/index.php',    '/favicon-16x16.png',    '/favicon-32x32.png',    '/android-chrome-144x144.png',    '/android-chrome-192x192.png',    '/android-chrome-256x256.png',    '/android-chrome-36x36.png',    '/android-chrome-384x384.png',    '/android-chrome-48x48.png',    '/android-chrome-512x512.png',    '/android-chrome-72x72.png',    '/android-chrome-96x96.png',    '/android-chrome-144x144.png',    '/web_hi_res_512.png',    '/site.js',    '/manifest.json',    '/styles.css',    '/js/mt.js',    '/js/o.min.js',    '/js/x.min.js',    '/js/evaluate.js',    '/student/config.php',    '/student/generate.php',    '/student/GenerateQuiz.php',    '/student/shuffle.php',    '/student/HelveticaNeue.ttf',    '/teacher/config.php',    '/teacher/FormPage.php',    '/teacher/SubmitQuestion.php'];//Install stage sets up the cache-array to configure pre-cache contentself.addEventListener('install', function (evt) {    console.log('[PWA Builder] The service worker is being installed.');    evt.waitUntil(precache().then(function () {        console.log('[PWA Builder] Skip waiting on install');        return self.skipWaiting();    }));});//allow sw to control of current pageself.addEventListener('activate', function (event) {    console.log('[PWA Builder] Claiming clients for current page');    return self.clients.claim();});self.addEventListener('fetch', function (evt) {    console.log('[PWA Builder] The service worker is serving the asset.' + evt.request.url);    evt.respondWith(fromCache(evt.request).catch(fromServer(evt.request)));    evt.waitUntil(update(evt.request));});function precache() {    return caches.open(CACHE).then(function (cache) {        return cache.addAll(precacheFiles);    });}function fromCache(request) {    //we pull files from the cache first thing so we can show them fast    return caches.open(CACHE).then(function (cache) {        return cache.match(request).then(function (matching) {            return matching || Promise.reject('no-match');        });    });}function update(request) {    //this is where we call the server to get the newest version of the    //file to use the next time we show view    return caches.open(CACHE).then(function (cache) {        return fetch(request).then(function (response) {            return cache.put(request, response);        });    });}function fromServer(request) {    //this is the fallback if it is not in the cache to go to the server and get it    return fetch(request).then(function (response) {        return response    });}